I am developing a vscode extension named DevFlowGPT, which bridge Browser events and vscode.
Here are my current TypeScript files, which follow these rules (each starts with number in brackets) (Let's name this rule set as "RuleSet-Scripts"):

[1] The part of the code scripts would start with `<|start-of-codes|>` and end with `<|end-of-codes|>`.

[2] Interpret the content between tag <exp> and </exp> as example of the context.

[3] File paths and names are specified in brackets and followed by a colon, and then followed by the codes from new line.
Example 1: `[src/extension.ts]:`;
Example 2: `[package.json]:`.

[4] The content of codes are included between tag <code> and </code> in separate line.
Example 1: <code>(All codes in `src/extension.ts`)</code>;
Example 2: <code>(All codes in `package.json`)</code>.

Based on the rules above, here is an example which follows Rule-2 and Rule-3:
<exp>
[src/extension.ts]:
<code>
...(Codes here)...
</code>
</exp>

-----

Below are the single or multiple scripts I will provide you.
Do not forget to follow the RuleSet-Scripts when interpret the contents.

<|start-of-codes|>
[package.json]:
<code>
{
  "name": "devflowgpt",
  "displayName": "DevFlowGPT",
  "description": "Streamline development workflow with GPT",
  "version": "0.0.1",
  "engines": {
    "vscode": "^1.78.0"
  },
  "categories": [
    "Other"
  ],
  "activationEvents": [],
  "main": "./out/extension.js",
  "contributes": {
    "commands": [
      {
        "command": "devflowgpt.sendMessage",
        "title": "DevFlowGPT: Send Message to Chrome Browser"
      },
      {
        "command": "devflowgpt.selectFile",
        "title": "DevFlowGPT: Select Files to Dump"
      }
    ]
  },
  "scripts": {
    "vscode:prepublish": "npm run compile",
    "compile": "tsc -p ./",
    "watch": "tsc -watch -p ./",
    "pretest": "npm run compile && npm run lint",
    "lint": "eslint src --ext ts",
    "test": "node ./out/test/runTest.js"
  },
  "devDependencies": {
    "@types/vscode": "^1.78.0",
    "@types/glob": "^8.1.0",
    "@types/mocha": "^10.0.1",
    "@types/node": "16.x",
    "@typescript-eslint/eslint-plugin": "^5.59.1",
    "@typescript-eslint/parser": "^5.59.1",
    "eslint": "^8.39.0",
    "glob": "^8.1.0",
    "mocha": "^10.2.0",
    "typescript": "^5.0.4",
    "@vscode/test-electron": "^2.3.0"
  }
}
</code>

[fileSelector.ts]:
<code>
import * as fs from 'fs';
import * as path from 'path';
import * as vscode from 'vscode';

export async function selectFile() {
    // Get the current workspace folder
    const workspaceFolder = vscode.workspace.workspaceFolders?.[0];
    if (!workspaceFolder) {
        vscode.window.showErrorMessage('No workspace folder is opened');
        return;
    }

    // Show a quick pick to let the user select multiple files
    const files = await vscode.workspace.findFiles('**/*', '**/node_modules/**');
    const fileItems = files.map(file => ({ label: path.basename(file.path), file }));
    const selectedFiles = await vscode.window.showQuickPick(fileItems, { placeHolder: 'Select files', canPickMany: true });

    if (selectedFiles && selectedFiles.length > 0) {
        // Read the contents of the selected files
        let fileContents = '';
        for (const selectedFile of selectedFiles) {
            const filePath = selectedFile.file.fsPath;
            const fileName = path.basename(filePath);
            const content = fs.readFileSync(filePath, 'utf-8');
            fileContents += `[${fileName}]:<code>\n${content}\n</code>\n\n`;
        }

        // Create a new untitled document with the contents of the selected files
        const document = await vscode.workspace.openTextDocument({ content: fileContents });

        // Show the document in a new editor
        await vscode.window.showTextDocument(document);
    }
}

</code>

[extension.ts]:<code>
import * as vscode from 'vscode';
import { handleBrowserMessage } from './messageHandler';
import { selectFile } from './fileSelector';

export function activate(context: vscode.ExtensionContext) {
    // Register the command to send a message from vscode to Chrome Browser
    let disposable = vscode.commands.registerCommand('devflowgpt.sendMessage', async () => {
        // Get the message to send from the user
        const message = await vscode.window.showInputBox({ prompt: 'Enter the message to send' });
		handleMessage(message);
    });
	context.subscriptions.push(disposable);
	console.log("> Handling message ...");
	

    // Listen for messages from Chrome Browser
    // TODO: Implement the logic to listen for messages from Chrome Browser and call handleMessage when a message is received

    // Register the command to select a file from the folder opened by vscode editor
    let selectFileDisposable = vscode.commands.registerCommand('devflowgpt.selectFile', async () => {
        await selectFile();
    });
    context.subscriptions.push(selectFileDisposable);
}

// Handle incoming messages from Chrome Browser
export function handleMessage(message: string | undefined) {
    // TODO: Implement the logic to handle incoming messages from Chrome Browser
	handleBrowserMessage(message);
	console.log(`After handling ${message} ...`);
}
</code>

[messageHandler.ts]:<code>
import * as vscode from 'vscode';

export function handleBrowserMessage(message: string ="<String_Placeholder>") {
    // TODO: Implement the logic to handle incoming messages from Chrome Browser
    // For example, you can show the message in a vscode window like this:
    vscode.window.showInformationMessage(`Received message from Chrome Browser: ${message}`);
    console.log(`Received message from Chrome Browser: ${message}`);
}
</code>

<|end-of-codes|>









Do following steps (each starts with number in brackets) based on the scripts I provide you:

[1] Draw a tree view of file structure, only with paths and names of all the provided scripts.
Here is an Example:
<code>
- src/
    - test/
    - extension.ts
    - messageHandler.ts
- package.json
- README.md
</code>

[2] Add or improve features (numbered with alphabets in brackets) to these scripts:
    [a] The drop-down menu of files to select should has the level view as they are in the file structure;
    [b] Remember the selected files and make them checked when call the `selectFile()` function next time;

[3] Provide the changed lines in each script with the git diff format, and include in triple backticks. Here is an example:
<exp>
[src/extension.ts]:
<code>
<added_lines_count> lines added, <deleted_lines_count> lines deleted, <changed_lines_count> lines changed
- <original lines>
+ <improved lines>
</code>
</exp>

If the changes are too long or the script is newly added, then explain this condition in the format comments, and do not provide the any contents of the changes or script.
Here is an example:
<exp>
[src/newfile.ts]:
<code>
<added_lines_count> lines added
# This file is newly added
<Do not provide any codes after>
</code>
</exp>

[4] Provide whole scripts, the format of your output should follow RuleSet-Scripts mentioned above.
Here is an example:
<exp>
`[src/extension.ts]`:
<code>
...(Whole improved or added script here)...
</code>
</exp>


Provide whole scripts of `fileSelector.ts` after your above improvements.


Great! But your codes are not perfect, and you need to do following improvement steps (with number in brackets):

[1] The following codes has an error "No overload matches this call", you need to explain the reason and fix it:
<code>
    const newSelectedFiles = await vscode.window.showQuickPick(fileItems, { placeHolder: 'Select files', canPickMany: true, activeItems: selectedFiles.map(file => fileItems.find(item => item.file.toString() === file.toString())) });
</code>

[2] The drop-down menu of files to be selected (`vscode.window.showQuickPick`) should use tree structure, which means: [a] there are indents for child level files; [b] select parent folder would select all files under it.


After doing the improvement steps above, please provide all lines of the improved scripts, and follow rules (with alphabets in brackets) below:
    [a] If one script has no change, do not output the codes;
    [b] Do not use git diff format, but just all lines.
    


Let me provide you more details to fix the error of "No overload matches this call":

<error>
No overload matches this call.
  The last overload gave the following error.
    Argument of type '{ placeHolder: string; canPickMany: true; activeItems: ({ label: string; file: vscode.Uri; } | undefined)[]; }' is not assignable to parameter of type 'QuickPickOptions'.
      Object literal may only specify known properties, and 'activeItems' does not exist in type 'QuickPickOptions'.
</error>

<error>
Property 'file' does not exist on type 'string'.
</error>


Great! But your codes are not perfect, and you need to do following improvement steps (with number in brackets):

[1] The drop-down menu of files to be selected (`vscode.window.showQuickPick`) should use tree structure, which have features below:
    [a] Parent folder should be on top of its child files
    [b] The button of check should be indented for child level files;


After doing the improvement steps above, please provide all lines of the improved scripts, and follow rules (with alphabets in brackets) below:
    [a] If one script has no change, do not output the codes;
    [b] Do not use git diff format, but just all lines.
    

Let's focus on the part of the codes below in "fileSelector.ts":
<code>
    ...
    // Show a quick pick to let the user select multiple files
    const files = await vscode.workspace.findFiles('**/*', '**/node_modules/**');
    const fileItems = files.map(file => ({ label: '  '.repeat((path.relative(workspaceFolder.uri.fsPath, file.fsPath).match(/\\/g) || []).length) + path.basename(file.fsPath), file })).sort((a, b) => a.label.localeCompare(b.label));
    const newSelectedFiles = await vscode.window.showQuickPick(fileItems, { placeHolder: 'Select files', canPickMany: true });

    if (newSelectedFiles) {
        selectedFiles.splice(0, selectedFiles.length, ...newSelectedFiles.map(item => item.file));
    }
    ...
</code>


You should improve the following features (with number in brackets):

[1] Show parent folder path for each child file item.
Here is an example of the tree structure of the UI for QuickPick. The `[ ]` represent the check box before filename, and `---` represents the indent.
<exp>
[ ] ..
--- [ ] src/
--- --- [ ] extension.ts
--- --- [ ] fileSelector.ts
--- --- [ ] messageHandler.ts
--- [ ] test/
--- [ ] package.json
</exp>

[2] Make the status of checked box memorized, so that when next time run the command "select files", the previous-checked box could be checked already.


In the drop-down window of `vscode.workspace.findFiles`, You should improve the original scripts, to exclude the file paths and names specified in a local ".gitignore" file with regex.
Only provide the whole script, do not show git diff.
