
I am developing a vscode extension named DevFlowGPT, which bridge Browser events and vscode.
Here are my current TypeScript files, which follow these rules numbered:

[1] File paths and names are specified in bracket and followed by a colon, and then followed by the codes from new line. An example is:
`[src/extension.ts]`:
```...(Codes here)...```

[2] Each code script is included in triple backticks, an example is ```code 1``` and ```code 2```.
[3] The part of my code scripts would start with `<|start-of-codes|>` and end with `<|end-of-codes|>`.


Please do following steps (numbered) based on the scripts I provide you:

[1] Add features (numbered by alphabets):
    [a] Select files from the folder opened by vscode editor;
    [b] Dump the contents of files to the custom editor created by extension.

[2] Provide the changed lines in "extension.ts" and "messageHandler.ts" with the git diff format, and include in triple backticks.
If the changes are too long or the script is newly added, then explain this condition in the format comments. Here are two examples:
```
[src/extension.ts]
<num_added> lines added, <num_deleted> lines deleted, <num_changed> lines changed
- <original lines>
+ <improved lines>
```

```
[src/newfile.ts]
<num_added> lines added
# This file is newly added
```

[3] Provide whole scripts, and specify the file paths and file names. An example is:
`[src/extension.ts]`:
```...(Whole improved or added script here)...```


<|start-of-codes|>

`[src/extension.ts]`:
```
import * as vscode from 'vscode';
import { handleBrowserMessage } from './messageHandler';

export function activate(context: vscode.ExtensionContext) {
    // Register the command to send a message from vscode to Chrome Browser
    let disposable = vscode.commands.registerCommand('devflowgpt.sendMessage', async () => {
        // Get the message to send from the user
        const message = await vscode.window.showInputBox({ prompt: 'Enter the message to send' });
		handleMessage(message);
    });
	context.subscriptions.push(disposable);
	console.log("> Handling message ...");
	

    // Listen for messages from Chrome Browser
    // TODO: Implement the logic to listen for messages from Chrome Browser and call handleMessage when a message is received
}

// Handle incoming messages from Chrome Browser
export function handleMessage(message: string | undefined) {
    // TODO: Implement the logic to handle incoming messages from Chrome Browser
	handleBrowserMessage(message);
	console.log(`After handling ${message} ...`);
}
```

`[src/messageHandler.ts]`:
```
import * as vscode from 'vscode';

export function handleBrowserMessage(message: string ="<String_Placeholder>") {
    // TODO: Implement the logic to handle incoming messages from Chrome Browser
    // For example, you can show the message in a vscode window like this:
    vscode.window.showInformationMessage(`Received message from Chrome Browser: ${message}`);
    console.log(`Received message from Chrome Browser: ${message}`);
}
```

`[package.json]`:
```
{
  "name": "devflowgpt",
  "displayName": "DevFlowGPT",
  "description": "Streamline development workflow with GPT",
  "version": "0.0.1",
  "engines": {
    "vscode": "^1.78.0"
  },
  "categories": [
    "Other"
  ],
  "activationEvents": [],
  "main": "./out/extension.js",
  "contributes": {
    "commands": [
      {
        "command": "devflowgpt.sendMessage",
        "title": "Send Message to Chrome Browser"
      }
    ]
  },
  "scripts": {
    "vscode:prepublish": "npm run compile",
    "compile": "tsc -p ./",
    "watch": "tsc -watch -p ./",
    "pretest": "npm run compile && npm run lint",
    "lint": "eslint src --ext ts",
    "test": "node ./out/test/runTest.js"
  },
  "devDependencies": {
    "@types/vscode": "^1.78.0",
    "@types/glob": "^8.1.0",
    "@types/mocha": "^10.0.1",
    "@types/node": "16.x",
    "@typescript-eslint/eslint-plugin": "^5.59.1",
    "@typescript-eslint/parser": "^5.59.1",
    "eslint": "^8.39.0",
    "glob": "^8.1.0",
    "mocha": "^10.2.0",
    "typescript": "^5.0.4",
    "@vscode/test-electron": "^2.3.0"
  }
}
```

<|end-of-codes|>



Are there any changes to "package.json"?
If there are, please provide the whole script of "package.json" with the rules I mentioned above.


Great! But you should apply following numbered improvements to the scripts:
[1] Extract the feature to "devflowgpt.selectFile" a new script.
[2] Bind the "devflowgpt.selectFile" to a command in command palette in vscode.
[3] Update and improve the original comments in scripts to make it fit to new features and functions.

You should do following steps:
[1] Explain your thoughts and plans, and core functions or modules in vscode extension capabilities you would use.
[2] Provide the changed lines with the git diff format, and include in triple backticks.
If the changes are too long or the script is newly added, do not provide these changes, but just explain this condition in the format comments. Here are two examples:
```
[src/extension.ts]
<num_of_lines_added> lines added, <num_of_lines_deleted> lines deleted, <num_of_lines_changed> lines changed
- <original lines>
+ <improved lines>
```

```
[src/newfile.ts]
<num_of_lines_added> lines added
# This file is newly added
```

[3] Provide whole scripts, and specify the file paths and file names. An example is:
`[src/extension.ts]`:
```...(Whole improved or added script here)...```