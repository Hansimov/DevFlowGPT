I'm developing a vscode extension named GPT-DevFlow, which should support send and receive messages between vscode and Chrome Browser.
[1] Generate TypeScript codes for this extension with this feature.
[2] Generate the file structure in a tree view.
[3] You should also summarize the features and functions as comments at the beginning of the script.


Great! Based on your previous codes, do following steps:
[1] Explain this code in backtick for me: `import { handleMessage } from './messageHandler';`.
[2] Explain this code in backtick for me: `export function handleMessage(message: string) {}`.
[3] Implement the logic of `handleMessage` both in "extension.ts" and "messageHandler.ts".


Provide whole script of "messageHandler.ts".


In the following codes in triple backticks, Import declaration conflicts with local declaration of 'handleMessage'.

```
import { handleMessage } from './messageHandler';
```

You should fix this declaration conflicts.


What are the differences between the handle message functions in "extension.ts" and "messageHandler.ts"


Why break up the handle message functions to these two parts?


Here are my current TypeScript files, which follow these rules:
[1] File path and filename is specified in the first line of the codes in bracket, an example is `[src/extension.ts]`.
[2] Each code script is included in triple backticks, an example is ```code 1``` and ```code 2```.

Please do following steps based on the scripts I provide you:
[1] Complete the "package.json", and fix "extension.ts" and "handleMessage.ts".
[2] Add other necessary files and functions to make the project has no build error.

``` [src/extension.ts]

import * as vscode from 'vscode';
import { handleBrowserMessage } from './messageHandler';

export function activate(context: vscode.ExtensionContext) {
    // Register the command to send a message from vscode to Chrome Browser
    let disposable = vscode.commands.registerCommand('gpt-devflow.sendMessage', async () => {
        // Get the message to send from the user
        const message = await vscode.window.showInputBox({ prompt: 'Enter the message to send' });
        if (message) {
            // Send the message to Chrome Browser
            // TODO: Implement the logic to send the message to Chrome Browser
        }
    });
	context.subscriptions.push(disposable);
	console.log("> Handling message ...");
	

    // Listen for messages from Chrome Browser
    // TODO: Implement the logic to listen for messages from Chrome Browser and call handleMessage when a message is received
}

// Handle incoming messages from Chrome Browser
export function handleMessage(message: string) {
    // TODO: Implement the logic to handle incoming messages from Chrome Browser
	handleBrowserMessage("This is a string from Chrome")
}
```

``` [src/messageHandler.ts]
import * as vscode from 'vscode';

export function handleBrowserMessage(message: string="<String PlaceHolder>") {
    // TODO: Implement the logic to handle incoming messages from Chrome Browser
    // For example, you can show the message in a vscode window like this:
    vscode.window.showInformationMessage(`Received message from Chrome Browser: ${message}`);
}
```


``` [package.json]
{
  "name": "gpt-devflow",
  "displayName": "GPT-DevFlow",
  "description": "Streamline development workflow with GPT",
  "version": "0.0.1",
  "engines": {
    "vscode": "^1.78.0"
  },
  "categories": [
    "Other"
  ],
  "activationEvents": [],
  "main": "./out/extension.js",
  "contributes": {
    "commands": [
      {
        "command": "gpt-devflow.helloWorld",
        "title": "Hello World"
      }
    ]
  },
  "scripts": {
    "vscode:prepublish": "npm run compile",
    "compile": "tsc -p ./",
    "watch": "tsc -watch -p ./",
    "pretest": "npm run compile && npm run lint",
    "lint": "eslint src --ext ts",
    "test": "node ./out/test/runTest.js"
  },
  "devDependencies": {
    "@types/vscode": "^1.78.0",
    "@types/glob": "^8.1.0",
    "@types/mocha": "^10.0.1",
    "@types/node": "16.x",
    "@typescript-eslint/eslint-plugin": "^5.59.1",
    "@typescript-eslint/parser": "^5.59.1",
    "eslint": "^8.39.0",
    "glob": "^8.1.0",
    "mocha": "^10.2.0",
    "typescript": "^5.0.4",
    "@vscode/test-electron": "^2.3.0"
  }
}
```


Provide the changed lines in "extension.ts" and "messageHandler.ts" with the git diff format:
```
<num_added> lines added, <num_deleted> lines deleted, <num_changed> lines changed

- <original lines>
- <improved lines>
```

Great! But after modifying as you suggest, there is no event happening (which should console a log at least) after typing input in the command palette when I run the command "gpt-devflow.sendMessage".


Here are my scripts which follow the same rule I mentioned above, please based on these new scripts, to find why there is no event happening after I type some text in 