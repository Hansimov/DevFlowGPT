In TamperMonkey script, how to get the current URL displayed in the browser?

Great! Then in TamperMonkey script, how to get the webpage element updates in real time?
For example, below is the HTML element from Bing AI chat, how to get the text content of the element in real time with stream mode?

```
<cib-message-group class="response-message-group" source="bot" serp-slot="none"></cib-message-group>
```

How to use js script to capture the webpage element updates?


Suppose there is a Web page element which contains the chat turns from user and Bing AI Chat:  `<cib-chat-turn serp-slot="none"></cib-chat-turn>`.
Then how to monitor and console.log the updates of the chat turns in real time with js script?


How to use js script to monitor the realtime updates of a web element?


Great! But the `targetNode` returns `null` when use querySelector.
Please check until it is found? Below is the line need to improve.

`const targetNode = document.querySelector('#cib-chat-main');`

what is the difference of `setTimeout` and `setInterval` in js?


Do following improvements to the function `monitorBingChat()`:
[1] Use `setTimeout` instead of `setInterval()`.
[2] The code `document.querySelector("#cib-chat-main")` cannot find the element, please use another method to select the element.

Here is the js codes of function:

```
function monitorBingChat() {
    let targetNode = null;
    const intervalId = setInterval(() => {
        targetNode = document.querySelector('#cib-chat-main');
        console.log(`targetNode: ${targetNode}`);
        if (targetNode) {
            console.log(`Bing Chat Found!`);
            clearInterval(intervalId);
            // Create an observer instance
            const observer = new MutationObserver((mutationsList, observer) => {
                // Loop through the list of mutations
                for (const mutation of mutationsList) {
                    // Check if nodes were added or removed
                    if (mutation.addedNodes.length > 0) {
                        console.log('Nodes added:', mutation.addedNodes);
                    } else if (mutation.removedNodes.length > 0) {
                        console.log('Nodes removed:', mutation.removedNodes);
                    }
                }
            });

            // Options for the observer (which mutations to observe)
            const config = { childList: true, subtree: true };

            // Start observing the target node for configured mutations
            observer.observe(targetNode, config);
        }
    }, 1000);
}
```

Do following improvements for the function `monitorBingChat()`:
[1] I think the `setInterval` method is better, please revert to the original version.
[2] The `targetNode` still cannot be found, is it because the document is not ready or updated when the function `monitorBingChat` is called?

Could you provide the events in a browser by execution time?

Answer following questions:
[1] Why `monitorBingChat()` is not executed when using `DOMContentLoaded` event listener, but executed when using `load` event listener?
[2] Why the `#cib-chat-main` could not be found althought ?


document.querySelector(".cib-serp-main").shadowRoot.querySelector("#cib-conversation-main").shadowRoot.querySelector("#cib-chat-main > cib-chat-turn").shadowRoot



Great! Below is my latest codes for function `monitorBingChat()`.
Please do following improvements:
[1] Check if the addedNodes is fully loaded.
[2] Print the contents of addedNodes when fully loaded.

```
    function monitorBingChat() {
        let targetNode = null;
        const intervalId = setInterval(() => {
            try {
                targetNode = document.querySelector(".cib-serp-main").shadowRoot
                    .querySelector("#cib-conversation-main").shadowRoot
                    .querySelector("#cib-chat-main > cib-chat-turn").shadowRoot;
                // console.log(`targetNode: ${targetNode}`);
            } catch (error) {
                // console.log("Bing Chat Not Found ...");
            }

            if (targetNode) {
                console.log(`Bing Chat Found!`);
                console.log(targetNode);
                clearInterval(intervalId);
                // Create an observer instance
                const observer = new MutationObserver((mutationsList, observer) => {
                    // Loop through the list of mutations
                    for (const mutation of mutationsList) {
                        // Check if nodes were added or removed
                        if (mutation.addedNodes.length > 0) {
                            console.log('Nodes added:', mutation.addedNodes);
                        } else if (mutation.removedNodes.length > 0) {
                            console.log('Nodes removed:', mutation.removedNodes);
                        }
                    }
                });

                // Options for the observer (which mutations to observe)
                const config = { childList: true, subtree: true };

                // Start observing the target node for configured mutations
                observer.observe(targetNode, config);
            }
        }, 1000);
    }
```


document.querySelector(".cib-serp-main").shadowRoot.querySelector("#cib-conversation-main").shadowRoot.querySelector("#cib-chat-main > cib-chat-turn").shadowRoot.querySelectorAll("cib-message-group")[1].shadowRoot.querySelectorAll("cib-message")[2].shadowRoot.querySelector("cib-shared > div > div > div.ac-textBlock").innerHTML


I use the below js script to get specific text content of the chat turns in Bing AI Chat:

```
document.querySelector(".cib-serp-main").shadowRoot.querySelector("#cib-conversation-main").shadowRoot.querySelector("#cib-chat-main > cib-chat-turn").shadowRoot.querySelectorAll("cib-message-group")[1].shadowRoot.querySelectorAll("cib-message")[2].shadowRoot.querySelector("cib-shared > div > div > div.ac-textBlock").innerHTML
```

And here is its outputs:

```
'<p>Sure! There are many resources available to learn about prompt engineering. Here are some tutorials that might be helpful:</p>\n<ul>\n<li><a class="tooltip-target" data-citationid="b98e7d17-b9d8-67d5-2422-4a7cf4f3c657-5-group" h="ID=SERP,5026.1"><strong>Learn Prompting: Your Guide to Communicating with AI</strong> </a><a href="https://learnprompting.org/" class="ac-anchor sup-target" target="_blank" data-citationid="b98e7d17-b9d8-67d5-2422-4a7cf4f3c657-5" aria-label="Learn Prompting: Your Guide to Communicating with AI" h="ID=SERP,5026.1"><sup>1</sup></a></li>\n<li><a class="tooltip-target" data-citationid="b98e7d17-b9d8-67d5-2422-4a7cf4f3c657-9-group" h="ID=SERP,5026.1"><strong>Prompt engineering techniques with Azure OpenAI</strong> </a><a href="https://learn.microsoft.com/en-us/azure/cognitive-services/openai/concepts/advanced-prompt-engineering" class="ac-anchor sup-target" target="_blank" data-citationid="b98e7d17-b9d8-67d5-2422-4a7cf4f3c657-9" aria-label="Prompt engineering techniques with Azure OpenAI - Azure OpenAI Service ..." h="ID=SERP,5026.1"><sup>2</sup></a></li>\n<li><a class="tooltip-target" data-citationid="b98e7d17-b9d8-67d5-2422-4a7cf4f3c657-13-group" h="ID=SERP,5026.1"><strong>A Complete Introduction to Prompt Engineering</strong> </a><a href="https://101blockchains.com/prompt-engineering/" class="ac-anchor sup-target" target="_blank" data-citationid="b98e7d17-b9d8-67d5-2422-4a7cf4f3c657-13" aria-label="A Complete Introduction to Prompt Engineering - 101 Blockchains" h="ID=SERP,5026.1"><sup>3</sup></a></li>\n<li><a class="tooltip-target" data-citationid="b98e7d17-b9d8-67d5-2422-4a7cf4f3c657-17-group" h="ID=SERP,5026.1"><strong>Prompt Engineering+: Master Speaking To AI (2023)</strong> </a><a href="https://www.udemy.com/course/mastering-prompt-engineering-learn-to-how-to-talk-to-ai/" class="ac-anchor sup-target" target="_blank" data-citationid="b98e7d17-b9d8-67d5-2422-4a7cf4f3c657-17" aria-label="Prompt Engineering+: Master Speaking To AI (2023) - Udemy" h="ID=SERP,5026.1"><sup>4</sup></a></li>\n</ul>\n<p>Is there a specific aspect of prompt engineering youâ€™re interested in learning more about?</p>\n'
```

In real time, the above content is printed in a stream mode, which means the text is generated word by word, not all at once.
So how could I get the text content of the chat turns in real time, and print it in console?


document.querySelector(".cib-serp-main").shadowRoot.querySelector("#cib-conversation-main").shadowRoot.querySelectorAll("#cib-chat-main > cib-chat-turn")[1].shadowRoot.querySelectorAll("cib-message-group")[1].shadowRoot.querySelectorAll("cib-message")[2].shadowRoot.querySelector("cib-shared > div > div > div.ac-textBlock").innerHTML

document.querySelector(".cib-serp-main").shadowRoot.querySelector("#cib-conversation-main").shadowRoot.querySelectorAll("#cib-chat-main > cib-chat-turn")[1].shadowRoot.querySelectorAll("cib-message-group")[1].shadowRoot.querySelectorAll("cib-message")[0].shadowRoot.querySelector("cib-shared > div > div > div.ac-textBlock").innerHTML


Great! Then how to make the console in  DevTools of Chrome keep outputting the changing texts without line breaks?


Great! But there are multiple `cib-chat-turn` under  `#cib-chat-main`, and I want to extract the contents of `ac-textBlock`. How could I output the changes of the expected contents after each node created and updated?

For your information, Here are two examples of the expected innerHTML that I would like to extract.

Example 1:
```
document.querySelector(".cib-serp-main").shadowRoot.querySelector("#cib-conversation-main").shadowRoot.querySelectorAll("#cib-chat-main > cib-chat-turn")[0].shadowRoot.querySelectorAll("cib-message-group")[1].shadowRoot.querySelectorAll("cib-message")[2].shadowRoot.querySelector("cib-shared > div > div > div.ac-textBlock").innerHTML
```

Example 2:
```
document.querySelector(".cib-serp-main").shadowRoot.querySelector("#cib-conversation-main").shadowRoot.querySelectorAll("#cib-chat-main > cib-chat-turn")[1].shadowRoot.querySelectorAll("cib-message-group")[1].shadowRoot.querySelectorAll("cib-message")[0].shadowRoot.querySelector("cib-shared > div > div > div.ac-textBlock").innerHTML
```


Great! But you should also output the changed texts of the innerHTML in real time to console without line breaks.


Below are a prototype typescript codes for monitoring the updates of the nodes in Bing Chat webpage. YOu should do following improvements which are listed by numbers in brackets:
[1] Use `forEach` instead of `addedNodes` in `mutationsList` to monitor the changes of the `cib-chat-turn` elements in `#cib-chat-main`.
[2] Make the codes cleaner to avoid multiple nested `if` and `for` expressions.

```
...
```

No, you should not only monitor the changes of the `addedNodes` tagged with `cib-chat-turn`, but also cover the created nodes tagged with `cib-chat-turn`.


Do following improvements to your codes:
[1] There is already an `cib-chat-turn` node when initialize page, but your codes miss this node since you only consider `mutation.addedNodes`. Fix this.
[2] The `ac-textBlock` might not under the first child of `cib-shared`, so you should change your `querySelector` for the textBlocks, which could find all the `ac-textBlock` under `cib-shared`.


Let's break up the codes, and improve it little by little.
Here is a minimal codes for adding observer to the `#cib-chat-main` element.
Please add features in the place of comment "To Implement", which is  output to console if any of the existed child nodes with tag `cib-chat-turn` changed or new child nodes named `cib-chat-turn` added for ``#cib-chat-main``.

```
    function monitorBingChat() {
        let cib_chat_main = null;
        const intervalId = setInterval(() => {
            try {
                cib_chat_main = document.querySelector(".cib-serp-main").shadowRoot.querySelector("#cib-conversation-main").shadowRoot.querySelector("#cib-chat-main");
            } catch (error) {
                // console.log("Bing Chat Not Found ...");
            }

            if (cib_chat_main) {
                console.log(`Bing Chat Found!`);
                console.log(cib_chat_main);
                clearInterval(intervalId);
                cib_chat_turns = cib_chat_main.querySelectorAll("cib-chat-turn");
                const cib_chat_main_observer = new MutationObserver((mutations) => {
                    // To Implement
                });
                const cib_chat_main_observer_config = { childList: true, subtree: true };
                cib_chat_main_observer.observe(cib_chat_main, cib_chat_main_observer_config);
            }
        }, 1000);
    }
```

Do following improvements the ts codes below:
For each `cib-chat-turn` node, add mutation observer to the child nodes with tag `cib-message-group` of its `shadowRoot`.

```
    function monitorBingChat() {
        let cib_chat_main = null;
        const intervalId = setInterval(() => {
            try {
                cib_chat_main = document.querySelector(".cib-serp-main").shadowRoot.querySelector("#cib-conversation-main").shadowRoot.querySelector("#cib-chat-main");
            } catch (error) {
                // console.log("Bing Chat Not Found ...");
            }

            if (cib_chat_main) {
                console.log(`Bing Chat Found!`);
                console.log(cib_chat_main);
                clearInterval(intervalId);
                cib_chat_turns = cib_chat_main.querySelectorAll("cib-chat-turn");
                const cib_chat_main_observer = new MutationObserver((mutations) => {
                    mutations.forEach(mutation => {
                        if (mutation.type === 'childList') {
                            mutation.addedNodes.forEach(node => {
                                if (node.nodeName === 'CIB-CHAT-TURN') {
                                    console.log('New cib-chat-turn node added:', node);
                                }
                            });
                        }
                    });
                });
                const cib_chat_main_observer_config = { childList: true, subtree: true };
                cib_chat_main_observer.observe(cib_chat_main, cib_chat_main_observer_config);
            }
        }, 1000);
    }
```


[2] For each `cib-message-group` node, add mutation observer to the child nodes with tag `cib-message-group` of its `shadowRoot`